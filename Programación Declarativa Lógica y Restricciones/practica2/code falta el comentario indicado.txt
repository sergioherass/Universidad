:- module(_,_,[classic,assertions,regtypes]).
:- use_module(library(lists)).

author_data('Heras', 'Alvarez', 'Sergio', 'C20M025').


board1([cell(pos(1 ,1),op(*,-3)),
        cell(pos(1 ,2),op(-,1)),
        cell(pos(1 ,3),op(-,4)),
        cell(pos(1 ,4),op(- ,555)),
        cell(pos(2 ,1),op(-,3)),
        cell(pos(2 ,2),op(+ ,2000)),
        cell(pos(2 ,3),op(* ,133)),
        cell(pos(2 ,4),op(- ,444)),
        cell(pos(3 ,1),op(*,0)),
        cell(pos(3 ,2),op(* ,155)),
        cell(pos(3 ,3),op(// ,2)),
        cell(pos(3 ,4),op(+ ,20)),
        cell(pos(4 ,1),op(-,2)),
        cell(pos(4 ,2),op(- ,1000)),
        cell(pos(4 ,3),op(-,9)),
        cell(pos(4 ,4),op(*,4))]).


% Direcciones permitidas
direccion(n).
direccion(s).
direccion(e).
direccion(o).
direccion(no).
direccion(ne).
direccion(so).
direccion(se).

%cuando comprueba todas las direcciones se vuelve a comprobar todas

% Predicado para obtener la posición resultante de moverse en una dirección desde una posición dada
efectuar_movimiento(pos(Row, Col), Dir, pos(Row2, Col2)) :-
    direccion(Dir),
    mover_posicion(Dir, Row, Col, Row2, Col2).

% Definición de las reglas de movimiento para cada dirección
mover_posicion(n, Row, Col, Row2, Col) :- Row2 is Row - 1.
mover_posicion(s, Row, Col, Row2, Col) :- Row2 is Row + 1.
mover_posicion(e, Row, Col, Row, Col2) :- Col2 is Col + 1.
mover_posicion(o, Row, Col, Row, Col2) :- Col2 is Col - 1.
mover_posicion(no, Row, Col, Row2, Col2) :- Row2 is Row - 1, Col2 is Col - 1.
mover_posicion(ne, Row, Col, Row2, Col2) :- Row2 is Row - 1, Col2 is Col + 1.
mover_posicion(so, Row, Col, Row2, Col2) :- Row2 is Row + 1, Col2 is Col - 1.
mover_posicion(se, Row, Col, Row2, Col2) :- Row2 is Row + 1, Col2 is Col + 1.

movimiento_valido(N, pos(Row,Col), Dir) :-
    efectuar_movimiento(pos(Row,Col), Dir, pos(Row2,Col2)),
    Row2 >= 1, Row2 =< N,
    Col2 >= 1, Col2 =< N.

select_cell(IPos, Op, Board, NewBoard) :-
    select(cell(IPos, Op), Board, NewBoard).
select_cell2(IPos, Op, Board) :-
    select(cell(IPos, Op), Board,NewBoard).


casilla_valida(pos(Row,Col),N):-
    Row >= 1, Row =< N,
    Col >= 1, Col =< N.

select_dir(Dir, Dirs , NewDirs) :-
    select(dir(Dir,Num), Dirs , TempDirs),
    Num > 1,
    NewNum is Num - 1,
    NewDirs = [dir(Dir, NewNum) | TempDirs].

%select_dir_val([dir(Dir,Num)|_], N, pos(Row,Col),Direccion) :-
 %   movimiento_valido(N, pos(Row,Col), Direccion).

%select_dir_val([dir(_,_)|RestoDirs], N, pos(Row,Col),Direccion) :-
% select_dir_val(RestoDirs, N, pos(Row,Col),Direccion).
select_dir_val([dir(Dir,Num)|_], N, pos(Row,Col), Direccion, Visitadas, NuevasVisitadas) :-

    efectuar_movimiento(pos(Row,Col),Direccion,NextPos),
    casilla_valida(NextPos,N),
   % movimiento_valido(N, pos(Row,Col), Direccion),
    visitada(NextPos, Visitadas, NuevasVisitadas).

select_dir_val([dir(_,_)|RestoDirs], N, pos(Row,Col),Direccion, Visitadas, NuevasVisitadas) :-
   select_dir_val(RestoDirs, N, pos(Row,Col),Direccion, Visitadas, NuevasVisitadas).


% Predicado base: una posición está "visitada" si está en la lista de posiciones visitadas.
visitada(Pos, Visitadas) :-
    member(Pos, Visitadas).

% Predicado recursivo: una posición está "visitada" si no está en la lista de posiciones visitadas
% y la añadimos a la lista.
visitada(Pos, Visitadas, NuevasVisitadas) :-
    \+ member(Pos, Visitadas),
    append(Visitadas, [Pos], NuevasVisitadas).

%select_dir_val(Dir, [dir(DirCandidato,_)|RestoDirs], N, Pos) :-
 %   (DirCandidato = Dir, movimiento_valido(N, Pos, Dir)) 
%  ; select_dir_val(Dir, RestoDirs, N, Pos).

%select_dir_val(Dir, [dir(DirCandidato,_)|RestoDirs], N, Pos) :-
 %   movimiento_valido(N, Pos, DirCandidato),
  %   Dir = DirCandidato
   % ; select_dir_val(Dir, RestoDirs, N, Pos).


select_dir(Dir, Dirs, NewDirs) :-
    select(dir(Dir, 1), Dirs, NewDirs).

select_dir(Dir, Dirs, Dirs) :-
    member(dir(Dir, _), Dirs).

aplicar_op(op(+, Operando), Valor, Valor2) :-
    Valor2 is Valor + Operando.
aplicar_op(op(-, Operando), Valor, Valor2) :-
    Valor2 is Valor - Operando.
aplicar_op(op(*, Operando), Valor, Valor2) :-
    Valor2 is Valor * Operando.
aplicar_op(op(//, Operando), Valor, Valor2) :-
    Valor2 is Valor // Operando.

generar_recorrido(Ipos, N, Board, DireccionesPermitidas, Recorrido, Valor) :-
    select_cell2(Ipos, op(Operador,Ivalor), Board),
    
    generar_recorrido_aux(Ipos, N, Board, DireccionesPermitidas,Ivalor, [(Ipos, Ivalor)],[Ipos], Recorrido, Valor).

generar_recorrido_aux(_, _, _, [],Ivalor, Recorrido, Recorrido, Valor).
generar_recorrido_aux(Ipos, N, Board, [dir(Dir, Repeticiones) | RestoDirs],Ivalor,RecorridoParcial,Visitadas,Recorrido, Valor) :-
    Repeticiones > 0,
    select_dir_val([dir(Dir, Repeticiones) | RestoDirs],N,Ipos,Direccion,Visitadas,NuevasVisitadas),
    member(dir(Direccion, _),[dir(Dir, Repeticiones) | RestoDirs]),
    select_dir(Direccion,[dir(Dir, Repeticiones) | RestoDirs], NewDirs),
    efectuar_movimiento(Ipos, Direccion, NextPos),
    select_cell(NextPos, Op, Board, NewBoard),
    aplicar_op(Op, Ivalor , ValorParcial),
    append(RecorridoParcial, [(NextPos, ValorParcial)], RecorridoParcial2),
    NuevoRepeticiones is Repeticiones - 1,
    generar_recorrido_aux(NextPos, N, NewBoard, NewDirs,ValorParcial, RecorridoParcial2,NuevasVisitadas,Recorrido, Valor).
generar_recorrido_aux(Ipos, N, Board, [dir(_, 0) | RestoDirs],Ivalor, RecorridoParcial,Visitadas, Recorrido, Valor) :-
    generar_recorrido_aux(Ipos, N, Board, RestoDirs,Ivalor, RecorridoParcial,Visitadas, Recorrido, Valor).


generar_recorridos(N, Board, DireccionesPermitidas, Recorrido, Valor).
tablero(N, Tablero , DireccionesPermitidas , ValorMinimo , NumeroDeRutasConValorMinimo ).
