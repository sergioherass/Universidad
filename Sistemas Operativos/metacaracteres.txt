#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pwd.h>
#include <unistd.h>
#include <signal.h>

int main(void) {
    // ... (declaración de variables y configuración de señales)

    while (1) {
        // ... (obtener orden y procesar la entrada)

        for (argvc = 0; (argv = argvv[argvc]); argvc++) {
            char *output = (char *)malloc(1024 * sizeof(char));
            int i = 0, j = 0;

            while (argv[0][i] != '\0') {
                if (argv[0][i] == '~') {
                    i++;
                    char username[128];
                    int user_i = 0;

                    while (argv[0][i] != '\0' && sscanf(&argv[0][i], "%[_a-zA-Z0-9]", &username[user_i])) {
                        user_i += strlen(&username[user_i]);
                        i += strlen(&username[user_i]);
                    }
                    username[user_i] = '\0';

                    char *home_dir = NULL;
                    if (user_i > 0) {
                        struct passwd *user_info = getpwnam(username);
                        if (user_info) {
                            home_dir = user_info->pw_dir;
                        }
                    } else {
                        home_dir = getenv("HOME");
                    }

                    if (home_dir) {
                        strncpy(&output[j], home_dir, strlen(home_dir));
                        j += strlen(home_dir);
                    }
                } else if (argv[0][i] == '$') {
                    i++;
                    char varname[128];
                    int var_i = 0;

                    while (argv[0][i] != '\0' && sscanf(&argv[0][i], "%[_a-zA-Z0-9]", &varname[var_i])) {
                        var_i += strlen(&varname[var_i]);
                        i += strlen(&varname[var_i]);
                    }
                    varname[var_i] = '\0';

                    if (var_i > 0) {
                        char *var_value = getenv(varname);
                        if (var_value) {
                            strncpy(&output[j], var_value, strlen(var_value));
                            j += strlen(var_value);
                        }
                    }
                } else {
                    output[j++] = argv[0][i++];
                }
            }

            output[j] = '\0';
            free(argvv[argvc][0]); // Liberar la memoria original antes de actualizar el puntero
            argvv[argvc][0] = output;

            // ... (código relacionado con la tubería)
        }
    }
}
